import {inject, Element, ObserverLocator,TaskQueue, customElement, bindable} from "aurelia-framework";
// import  "datatables"
// import $ from "jquery";
// import JSON from "aurelia-framework";
// console.log($)
import {EventAggregator} from 'aurelia-event-aggregator';
// import $ from "datatables"
// import DataTable from "datatables"
import "datatables"
@customElement('el-table')
@inject(EventAggregator, TaskQueue,ObserverLocator)
export class DT{
	@bindable tablediv;
	constructor(eventAggregator, taskQueue, observerLocator){
		// this.dataTable = dataTable;
		// this.id = element.id;
		// this.element = element;
		// this.tableid = element.id;
		// this.datatable = datatable;
		this.rawTableData = {data:[[]],columns:[]}
		this.eventAggregator = eventAggregator;
		this.taskQueue = taskQueue;
		// this.observerLocator = observerLocator;
		// var subscription = this.observerLocator
		// 				      .getObserver(this, 'rawPlotData')
		// 				      .subscribe(this.rawPlotDataChanged);
	}

	activate(){
		// this.eventAggregator.subscribe('rawdata', plotdata => { this.taskQueue.queueMicroTask((plotdata) => { this.rawTableData = plotdata; 
		// 												this.dataset = plotdata;
		// 												console.log($);
														
		// 												console.log(this.dataset)
		// 												console.log(this.tablediv);
		// 												console.log(this);
		// 												// $(this.tablediv).dataTable(this.rawTableData);
		// 											});
		


	}

	attached() {
		// this.observerLocator = observerLocator;
		// var subscription = this.observerLocator
		// 				      .getObserver(this, 'rawPlotData')
		// 				      .subscribe(this.rawPlotDataChanged);
		

		this.eventAggregator.subscribe('rawdata', tabledata => {
														this.rawTableData = tabledata; 
														this.dataset = tabledata;
														console.log($);
														
														console.log(this.dataset)
														console.log(this.tablediv);
														console.log(this);
														$(this.tablediv).dataTable(this.dataset);
													});
		// this.dataset = JSON.parse("{\"dat\": [[3, 3, 3], [33, 30, 33], [146, 113, 146], [227, 81, 227], [342, 115, 342], [351, 9, 351], [353, 2, 353], [444, 91, 444], [556, 112, 556], [571, 15, 571], [709, 138, 709], [759, 50, 759], [836, 77, 836], [860, 24, 860], [968, 108, 968], [1056, 88, 1056], [1726, 670, 1726], [1846, 120, 1846], [1872, 26, 1872], [1986, 114, 1986], [2311, 325, 2311], [2366, 55, 2366], [2608, 242, 2608], [2676, 68, 2676], [3098, 422, 3098], [3278, 180, 3278], [3288, 10, 3288], [4434, 1146, 4434], [5034, 600, 5034], [5049, 15, 5049], [5085, 36, 5085], [5089, 4, 5089], [5089, 0, 5089], [5097, 8, 5097], [5324, 227, 5324], [5389, 65, 5389], [5565, 176, 5565], [5623, 58, 5623], [6080, 457, 6080], [6380, 300, 6380], [6477, 97, 6477], [6740, 263, 6740], [7192, 452, 7192], [7447, 255, 7447], [7644, 197, 7644], [7837, 193, 7837], [7843, 6, 7843], [7922, 79, 7922], [8738, 816, 8738], [10089, 1351, 10089], [10237, 148, 10237], [10258, 21, 10258], [10491, 233, 10491], [10625, 134, 10625], [10982, 357, 10982], [11175, 193, 11175], [11411, 236, 11411], [11442, 31, 11442], [11811, 369, 11811], [12559, 748, 12559], [12559, 0, 12559], [12791, 232, 12791], [13121, 330, 13121], [13486, 365, 13486], [14708, 1222, 14708], [15251, 543, 15251], [15261, 10, 15261], [15277, 16, 15277], [15806, 529, 15806], [16185, 379, 16185], [16229, 44, 16229], [16358, 129, 16358], [17168, 810, 17168], [17458, 290, 17458], [17758, 300, 17758], [18287, 529, 18287], [18568, 281, 18568], [18728, 160, 18728], [19556, 828, 19556], [20567, 1011, 20567], [21012, 445, 21012], [21308, 296, 21308], [23063, 1755, 23063], [24127, 1064, 24127], [25910, 1783, 25910], [26770, 860, 26770], [27753, 983, 27753], [28460, 707, 28460], [28493, 33, 28493], [29361, 868, 29361], [30085, 724, 30085], [32408, 2323, 32408], [35338, 2930, 35338], [36799, 1461, 36799], [37642, 843, 37642], [37654, 12, 37654], [37915, 261, 37915], [39715, 1800, 39715], [40580, 865, 40580], [42015, 1435, 42015], [42045, 30, 42045], [42188, 143, 42188], [42296, 108, 42296], [42296, 0, 42296], [45406, 3110, 45406], [46653, 1247, 46653], [47596, 943, 47596], [48296, 700, 48296], [49171, 875, 49171], [49416, 245, 49416], [50145, 729, 50145], [52042, 1897, 52042], [52489, 447, 52489], [52875, 386, 52875], [53321, 446, 53321], [53443, 122, 53443], [54433, 990, 54433], [55381, 948, 55381], [56463, 1082, 56463], [56485, 22, 56485], [56560, 75, 56560], [57042, 482, 57042], [62551, 5509, 62551], [62651, 100, 62651], [62661, 10, 62661], [63732, 1071, 63732], [64103, 371, 64103], [64893, 790, 64893], [71043, 6150, 71043], [74364, 3321, 74364], [75409, 1045, 75409], [76057, 648, 76057], [81542, 5485, 81542], [82702, 1160, 82702], [84566, 1864, 84566], [88682, 4116, 88682]], \"columns\": [{\"title\": \"FT\"}, {\"title\": \"FN\"}, {\"title\": \"IF\"}]}")
		// $("#example").dataTable(this.dataset);

		// this.rawPlotDataChanged();
		// console.log(this);
		// this.taskQueue.queueMicroTask(() => console.log(this))
	}
	rawPlotDataChanged(){
		// this.eventAggregator.subscribe('rawdata', plotdata => {
		// 												this.rawTableData = plotdata; 
		// 												this.dataset = plotdata;
		// 												console.log($);
														
		// 												console.log(this.dataset)
		// 												console.log(this.tablediv);
		// 												console.log(this);
		// 												$(this.tablediv).dataTable(this.dataset);
		// 											});
		// console.log(this)
		// $(this.tablediv).dataTable(this.dataset);
	}

// 		// var div = this.dygraphdiv
// 		// console.log(this.taskQueue);
// 		// this.taskQueue.queueMicroTask(() => {
		
// 			// this.rawData = this.rawTableData;
// 			// this.rawData = {};
// 			// console.log(this.rawPlotData)
// 			// console.log(this.json)
// 			// this.dataset = this.rawTableData
// 			// this.dataset = JSON.parse("{\"data\": [[3, 3, 3], [33, 30, 33], [146, 113, 146], [227, 81, 227], [342, 115, 342], [351, 9, 351], [353, 2, 353], [444, 91, 444], [556, 112, 556], [571, 15, 571], [709, 138, 709], [759, 50, 759], [836, 77, 836], [860, 24, 860], [968, 108, 968], [1056, 88, 1056], [1726, 670, 1726], [1846, 120, 1846], [1872, 26, 1872], [1986, 114, 1986], [2311, 325, 2311], [2366, 55, 2366], [2608, 242, 2608], [2676, 68, 2676], [3098, 422, 3098], [3278, 180, 3278], [3288, 10, 3288], [4434, 1146, 4434], [5034, 600, 5034], [5049, 15, 5049], [5085, 36, 5085], [5089, 4, 5089], [5089, 0, 5089], [5097, 8, 5097], [5324, 227, 5324], [5389, 65, 5389], [5565, 176, 5565], [5623, 58, 5623], [6080, 457, 6080], [6380, 300, 6380], [6477, 97, 6477], [6740, 263, 6740], [7192, 452, 7192], [7447, 255, 7447], [7644, 197, 7644], [7837, 193, 7837], [7843, 6, 7843], [7922, 79, 7922], [8738, 816, 8738], [10089, 1351, 10089], [10237, 148, 10237], [10258, 21, 10258], [10491, 233, 10491], [10625, 134, 10625], [10982, 357, 10982], [11175, 193, 11175], [11411, 236, 11411], [11442, 31, 11442], [11811, 369, 11811], [12559, 748, 12559], [12559, 0, 12559], [12791, 232, 12791], [13121, 330, 13121], [13486, 365, 13486], [14708, 1222, 14708], [15251, 543, 15251], [15261, 10, 15261], [15277, 16, 15277], [15806, 529, 15806], [16185, 379, 16185], [16229, 44, 16229], [16358, 129, 16358], [17168, 810, 17168], [17458, 290, 17458], [17758, 300, 17758], [18287, 529, 18287], [18568, 281, 18568], [18728, 160, 18728], [19556, 828, 19556], [20567, 1011, 20567], [21012, 445, 21012], [21308, 296, 21308], [23063, 1755, 23063], [24127, 1064, 24127], [25910, 1783, 25910], [26770, 860, 26770], [27753, 983, 27753], [28460, 707, 28460], [28493, 33, 28493], [29361, 868, 29361], [30085, 724, 30085], [32408, 2323, 32408], [35338, 2930, 35338], [36799, 1461, 36799], [37642, 843, 37642], [37654, 12, 37654], [37915, 261, 37915], [39715, 1800, 39715], [40580, 865, 40580], [42015, 1435, 42015], [42045, 30, 42045], [42188, 143, 42188], [42296, 108, 42296], [42296, 0, 42296], [45406, 3110, 45406], [46653, 1247, 46653], [47596, 943, 47596], [48296, 700, 48296], [49171, 875, 49171], [49416, 245, 49416], [50145, 729, 50145], [52042, 1897, 52042], [52489, 447, 52489], [52875, 386, 52875], [53321, 446, 53321], [53443, 122, 53443], [54433, 990, 54433], [55381, 948, 55381], [56463, 1082, 56463], [56485, 22, 56485], [56560, 75, 56560], [57042, 482, 57042], [62551, 5509, 62551], [62651, 100, 62651], [62661, 10, 62661], [63732, 1071, 63732], [64103, 371, 64103], [64893, 790, 64893], [71043, 6150, 71043], [74364, 3321, 74364], [75409, 1045, 75409], [76057, 648, 76057], [81542, 5485, 81542], [82702, 1160, 82702], [84566, 1864, 84566], [88682, 4116, 88682]], \"columns\": [{\"title\": \"FT\"}, {\"title\": \"FN\"}, {\"title\": \"IF\"}]}"
// // )
// 			// this.dataset = JSON.parse("{\"data\": [[3, 3, 3], [33, 30, 33], [146, 113, 146], [227, 81, 227], [342, 115, 342], [351, 9, 351], [353, 2, 353], [444, 91, 444], [556, 112, 556], [571, 15, 571], [709, 138, 709], [759, 50, 759], [836, 77, 836], [860, 24, 860], [968, 108, 968], [1056, 88, 1056], [1726, 670, 1726], [1846, 120, 1846], [1872, 26, 1872], [1986, 114, 1986], [2311, 325, 2311], [2366, 55, 2366], [2608, 242, 2608], [2676, 68, 2676], [3098, 422, 3098], [3278, 180, 3278], [3288, 10, 3288], [4434, 1146, 4434], [5034, 600, 5034], [5049, 15, 5049], [5085, 36, 5085], [5089, 4, 5089], [5089, 0, 5089], [5097, 8, 5097], [5324, 227, 5324], [5389, 65, 5389], [5565, 176, 5565], [5623, 58, 5623], [6080, 457, 6080], [6380, 300, 6380], [6477, 97, 6477], [6740, 263, 6740], [7192, 452, 7192], [7447, 255, 7447], [7644, 197, 7644], [7837, 193, 7837], [7843, 6, 7843], [7922, 79, 7922], [8738, 816, 8738], [10089, 1351, 10089], [10237, 148, 10237], [10258, 21, 10258], [10491, 233, 10491], [10625, 134, 10625], [10982, 357, 10982], [11175, 193, 11175], [11411, 236, 11411], [11442, 31, 11442], [11811, 369, 11811], [12559, 748, 12559], [12559, 0, 12559], [12791, 232, 12791], [13121, 330, 13121], [13486, 365, 13486], [14708, 1222, 14708], [15251, 543, 15251], [15261, 10, 15261], [15277, 16, 15277], [15806, 529, 15806], [16185, 379, 16185], [16229, 44, 16229], [16358, 129, 16358], [17168, 810, 17168], [17458, 290, 17458], [17758, 300, 17758], [18287, 529, 18287], [18568, 281, 18568], [18728, 160, 18728], [19556, 828, 19556], [20567, 1011, 20567], [21012, 445, 21012], [21308, 296, 21308], [23063, 1755, 23063], [24127, 1064, 24127], [25910, 1783, 25910], [26770, 860, 26770], [27753, 983, 27753], [28460, 707, 28460], [28493, 33, 28493], [29361, 868, 29361], [30085, 724, 30085], [32408, 2323, 32408], [35338, 2930, 35338], [36799, 1461, 36799], [37642, 843, 37642], [37654, 12, 37654], [37915, 261, 37915], [39715, 1800, 39715], [40580, 865, 40580], [42015, 1435, 42015], [42045, 30, 42045], [42188, 143, 42188], [42296, 108, 42296], [42296, 0, 42296], [45406, 3110, 45406], [46653, 1247, 46653], [47596, 943, 47596], [48296, 700, 48296], [49171, 875, 49171], [49416, 245, 49416], [50145, 729, 50145], [52042, 1897, 52042], [52489, 447, 52489], [52875, 386, 52875], [53321, 446, 53321], [53443, 122, 53443], [54433, 990, 54433], [55381, 948, 55381], [56463, 1082, 56463], [56485, 22, 56485], [56560, 75, 56560], [57042, 482, 57042], [62551, 5509, 62551], [62651, 100, 62651], [62661, 10, 62661], [63732, 1071, 63732], [64103, 371, 64103], [64893, 790, 64893], [71043, 6150, 71043], [74364, 3321, 74364], [75409, 1045, 75409], [76057, 648, 76057], [81542, 5485, 81542], [82702, 1160, 82702], [84566, 1864, 84566], [88682, 4116, 88682]], \"columns\": [{\"title\": \"FT\"}, {\"title\": \"FN\"}, {\"title\": \"IF\"}]}")

// 			// // this.dataset = {"columns": [{"name": "FT"}, {"name": "FN"}, {"name": "IF"}], "title": [[3, 3, 3], [33, 30, 33], [146, 113, 146], [227, 81, 227], [342, 115, 342], [351, 9, 351], [353, 2, 353], [444, 91, 444], [556, 112, 556], [571, 15, 571], [709, 138, 709], [759, 50, 759], [836, 77, 836], [860, 24, 860], [968, 108, 968], [1056, 88, 1056], [1726, 670, 1726], [1846, 120, 1846], [1872, 26, 1872], [1986, 114, 1986], [2311, 325, 2311], [2366, 55, 2366], [2608, 242, 2608], [2676, 68, 2676], [3098, 422, 3098], [3278, 180, 3278], [3288, 10, 3288], [4434, 1146, 4434], [5034, 600, 5034], [5049, 15, 5049], [5085, 36, 5085], [5089, 4, 5089], [5089, 0, 5089], [5097, 8, 5097], [5324, 227, 5324], [5389, 65, 5389], [5565, 176, 5565], [5623, 58, 5623], [6080, 457, 6080], [6380, 300, 6380], [6477, 97, 6477], [6740, 263, 6740], [7192, 452, 7192], [7447, 255, 7447], [7644, 197, 7644], [7837, 193, 7837], [7843, 6, 7843], [7922, 79, 7922], [8738, 816, 8738], [10089, 1351, 10089], [10237, 148, 10237], [10258, 21, 10258], [10491, 233, 10491], [10625, 134, 10625], [10982, 357, 10982], [11175, 193, 11175], [11411, 236, 11411], [11442, 31, 11442], [11811, 369, 11811], [12559, 748, 12559], [12559, 0, 12559], [12791, 232, 12791], [13121, 330, 13121], [13486, 365, 13486], [14708, 1222, 14708], [15251, 543, 15251], [15261, 10, 15261], [15277, 16, 15277], [15806, 529, 15806], [16185, 379, 16185], [16229, 44, 16229], [16358, 129, 16358], [17168, 810, 17168], [17458, 290, 17458], [17758, 300, 17758], [18287, 529, 18287], [18568, 281, 18568], [18728, 160, 18728], [19556, 828, 19556], [20567, 1011, 20567], [21012, 445, 21012], [21308, 296, 21308], [23063, 1755, 23063], [24127, 1064, 24127], [25910, 1783, 25910], [26770, 860, 26770], [27753, 983, 27753], [28460, 707, 28460], [28493, 33, 28493], [29361, 868, 29361], [30085, 724, 30085], [32408, 2323, 32408], [35338, 2930, 35338], [36799, 1461, 36799], [37642, 843, 37642], [37654, 12, 37654], [37915, 261, 37915], [39715, 1800, 39715], [40580, 865, 40580], [42015, 1435, 42015], [42045, 30, 42045], [42188, 143, 42188], [42296, 108, 42296], [42296, 0, 42296], [45406, 3110, 45406], [46653, 1247, 46653], [47596, 943, 47596], [48296, 700, 48296], [49171, 875, 49171], [49416, 245, 49416], [50145, 729, 50145], [52042, 1897, 52042], [52489, 447, 52489], [52875, 386, 52875], [53321, 446, 53321], [53443, 122, 53443], [54433, 990, 54433], [55381, 948, 55381], [56463, 1082, 56463], [56485, 22, 56485], [56560, 75, 56560], [57042, 482, 57042], [62551, 5509, 62551], [62651, 100, 62651], [62661, 10, 62661], [63732, 1071, 63732], [64103, 371, 64103], [64893, 790, 64893], [71043, 6150, 71043], [74364, 3321, 74364], [75409, 1045, 75409], [76057, 648, 76057], [81542, 5485, 81542], [82702, 1160, 82702], [84566, 1864, 84566], [88682, 4116, 88682]]}
// 			// // // this.dataset = {"data": [[3, 3, 3], [33, 30, 33], [146, 113, 146], [227, 81, 227], [342, 115, 342], [351, 9, 351], [353, 2, 353], [444, 91, 444], [556, 112, 556], [571, 15, 571], [709, 138, 709], [759, 50, 759], [836, 77, 836], [860, 24, 860], [968, 108, 968], [1056, 88, 1056], [1726, 670, 1726], [1846, 120, 1846], [1872, 26, 1872], [1986, 114, 1986], [2311, 325, 2311], [2366, 55, 2366], [2608, 242, 2608], [2676, 68, 2676], [3098, 422, 3098], [3278, 180, 3278], [3288, 10, 3288], [4434, 1146, 4434], [5034, 600, 5034], [5049, 15, 5049], [5085, 36, 5085], [5089, 4, 5089], [5089, 0, 5089], [5097, 8, 5097], [5324, 227, 5324], [5389, 65, 5389], [5565, 176, 5565], [5623, 58, 5623], [6080, 457, 6080], [6380, 300, 6380], [6477, 97, 6477], [6740, 263, 6740], [7192, 452, 7192], [7447, 255, 7447], [7644, 197, 7644], [7837, 193, 7837], [7843, 6, 7843], [7922, 79, 7922], [8738, 816, 8738], [10089, 1351, 10089], [10237, 148, 10237], [10258, 21, 10258], [10491, 233, 10491], [10625, 134, 10625], [10982, 357, 10982], [11175, 193, 11175], [11411, 236, 11411], [11442, 31, 11442], [11811, 369, 11811], [12559, 748, 12559], [12559, 0, 12559], [12791, 232, 12791], [13121, 330, 13121], [13486, 365, 13486], [14708, 1222, 14708], [15251, 543, 15251], [15261, 10, 15261], [15277, 16, 15277], [15806, 529, 15806], [16185, 379, 16185], [16229, 44, 16229], [16358, 129, 16358], [17168, 810, 17168], [17458, 290, 17458], [17758, 300, 17758], [18287, 529, 18287], [18568, 281, 18568], [18728, 160, 18728], [19556, 828, 19556], [20567, 1011, 20567], [21012, 445, 21012], [21308, 296, 21308], [23063, 1755, 23063], [24127, 1064, 24127], [25910, 1783, 25910], [26770, 860, 26770], [27753, 983, 27753], [28460, 707, 28460], [28493, 33, 28493], [29361, 868, 29361], [30085, 724, 30085], [32408, 2323, 32408], [35338, 2930, 35338], [36799, 1461, 36799], [37642, 843, 37642], [37654, 12, 37654], [37915, 261, 37915], [39715, 1800, 39715], [40580, 865, 40580], [42015, 1435, 42015], [42045, 30, 42045], [42188, 143, 42188], [42296, 108, 42296], [42296, 0, 42296], [45406, 3110, 45406], [46653, 1247, 46653], [47596, 943, 47596], [48296, 700, 48296], [49171, 875, 49171], [49416, 245, 49416], [50145, 729, 50145], [52042, 1897, 52042], [52489, 447, 52489], [52875, 386, 52875], [53321, 446, 53321], [53443, 122, 53443], [54433, 990, 54433], [55381, 948, 55381], [56463, 1082, 56463], [56485, 22, 56485], [56560, 75, 56560], [57042, 482, 57042], [62551, 5509, 62551], [62651, 100, 62651], [62661, 10, 62661], [63732, 1071, 63732], [64103, 371, 64103], [64893, 790, 64893], [71043, 6150, 71043], [74364, 3321, 74364], [75409, 1045, 75409], [76057, 648, 76057], [81542, 5485, 81542], [82702, 1160, 82702], [84566, 1864, 84566], [88682, 4116, 88682]], "columns": [{"name": "FT"}, {"name": "FN"}, {"name": "IF"}]}
// 			// $(this.tablediv).dataTable(this.rawTabledataset);
// 			// console.log(this.rawData)
// 		}
		
	
}
	// attached(){
	// 	// console.log(DataTable);
		
	// 	var dataSet = [
	//     [ "Tiger Nixon", "System Architect", "Edinburgh", "5421", "2011/04/25", "$320,800" ],
	//     [ "Garrett Winters", "Accountant", "Tokyo", "8422", "2011/07/25", "$170,750" ],
	//     [ "Ashton Cox", "Junior Technical Author", "San Francisco", "1562", "2009/01/12", "$86,000" ],
	//     [ "Cedric Kelly", "Senior Javascript Developer", "Edinburgh", "6224", "2012/03/29", "$433,060" ],
	//     [ "Airi Satou", "Accountant", "Tokyo", "5407", "2008/11/28", "$162,700" ],
	//     [ "Brielle Williamson", "Integration Specialist", "New York", "4804", "2012/12/02", "$372,000" ],
	//     [ "Herrod Chandler", "Sales Assistant", "San Francisco", "9608", "2012/08/06", "$137,500" ],
	//     [ "Rhona Davidson", "Integration Specialist", "Tokyo", "6200", "2010/10/14", "$327,900" ],
	//     [ "Colleen Hurst", "Javascript Developer", "San Francisco", "2360", "2009/09/15", "$205,500" ],
	//     [ "Sonya Frost", "Software Engineer", "Edinburgh", "1667", "2008/12/13", "$103,600" ],
	//     [ "Jena Gaines", "Office Manager", "London", "3814", "2008/12/19", "$90,560" ],
	//     [ "Quinn Flynn", "Support Lead", "Edinburgh", "9497", "2013/03/03", "$342,000" ],
	//     [ "Charde Marshall", "Regional Director", "San Francisco", "6741", "2008/10/16", "$470,600" ],
	//     [ "Haley Kennedy", "Senior Marketing Designer", "London", "3597", "2012/12/18", "$313,500" ],
	//     [ "Tatyana Fitzpatrick", "Regional Director", "London", "1965", "2010/03/17", "$385,750" ],
	//     [ "Michael Silva", "Marketing Designer", "London", "1581", "2012/11/27", "$198,500" ],
	//     [ "Paul Byrd", "Chief Financial Officer (CFO)", "New York", "3059", "2010/06/09", "$725,000" ],
	//     [ "Gloria Little", "Systems Administrator", "New York", "1721", "2009/04/10", "$237,500" ],
	//     [ "Bradley Greer", "Software Engineer", "London", "2558", "2012/10/13", "$132,000" ],
	//     [ "Dai Rios", "Personnel Lead", "Edinburgh", "2290", "2012/09/26", "$217,500" ],
	//     [ "Jenette Caldwell", "Development Lead", "New York", "1937", "2011/09/03", "$345,000" ],
	//     [ "Yuri Berry", "Chief Marketing Officer (CMO)", "New York", "6154", "2009/06/25", "$675,000" ],
	//     [ "Caesar Vance", "Pre-Sales Support", "New York", "8330", "2011/12/12", "$106,450" ],
	//     [ "Doris Wilder", "Sales Assistant", "Sidney", "3023", "2010/09/20", "$85,600" ],
	//     [ "Angelica Ramos", "Chief Executive Officer (CEO)", "London", "5797", "2009/10/09", "$1,200,000" ],
	//     [ "Gavin Joyce", "Developer", "Edinburgh", "8822", "2010/12/22", "$92,575" ],
	//     [ "Jennifer Chang", "Regional Director", "Singapore", "9239", "2010/11/14", "$357,650" ],
	//     [ "Brenden Wagner", "Software Engineer", "San Francisco", "1314", "2011/06/07", "$206,850" ],
	//     [ "Fiona Green", "Chief Operating Officer (COO)", "San Francisco", "2947", "2010/03/11", "$850,000" ],
	//     [ "Shou Itou", "Regional Marketing", "Tokyo", "8899", "2011/08/14", "$163,000" ],
	//     [ "Michelle House", "Integration Specialist", "Sidney", "2769", "2011/06/02", "$95,400" ],
	//     [ "Suki Burks", "Developer", "London", "6832", "2009/10/22", "$114,500" ],
	//     [ "Prescott Bartlett", "Technical Author", "London", "3606", "2011/05/07", "$145,000" ],
	//     [ "Gavin Cortez", "Team Leader", "San Francisco", "2860", "2008/10/26", "$235,500" ],
	//     [ "Martena Mccray", "Post-Sales support", "Edinburgh", "8240", "2011/03/09", "$324,050" ],
	//     [ "Unity Butler", "Marketing Designer", "San Francisco", "5384", "2009/12/09", "$85,675" ]
	// ];

	// console.log(DataTable);
	// $(this.tablediv).dataTable( {
	// 	data: dataSet,
	// 	columns: [["Name"],["Position"],["Office"],["Ext"],["start"],["end"]]
 //            // { "title": "Name" },
 //            // { "title": "Position" },
 //            // { "title": "Office" },
 //            // { "title": "Extn." },
 //            // { "title": "Start date" },
 //            // { "title": "Salary" }
        
 //      });
	// // console.log($(this.tablediv))
	// // 	$(this.element).DataTable({data:dataSet})
	// // 	// table(dataSet);
	// }
	// attached(){
	// // 	console.log("Hello i am table from attached")

	
 // 	console.log(dataSet);
 // 	console.log(this.tablediv);
 // 	console.log(DataTable);
	// $(this.tablediv).DataTable({
	//         data: dataSet,
	// 	        columns: [
	// 	            { title: "Name" },
	// 	            { title: "Position" },
	// 	            { title: "Office" },
	// 	            { title: "Extn." },
	// 	            { title: "Start date" },
	// 	            { title: "Salary" }
	//         	]
	// 		});
	// // ta.appendTo(this.tablediv);
	// console.log(ta)
	// }